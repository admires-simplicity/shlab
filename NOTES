finished trace01
maybe finished trace02. I just used exit(1). not sure if this will mess with running jobs (?). I think it will leave background jobs running, which is good. Maybe I need to reap zombies first (??)



when SIGCHLD is signalled, sigchld_handler will be called

sigchld_handler:
  reap all available zombie children, but don't wait for any other currently running children to terminate 

parent process
block SIGCHLD
call fork()
addjob
unblock sigchld
call waitfg	
  if process terminates -> someone (eval? waitfg? sigchld_handler?) has to call deletejob


child process
execve
deletejob ??
 (terminate shell?)








sigprocmask & sigsuspend

"wait" for sigchild in main on a foreground job : sigsuspend
 (actual waitpid happens in sigchild handler)
 
 
wait/waitpid options
WNOHANG -- prevent wait/waitpid from blocking. wait/waitpid returns immediately.
return 0 is nothing terminated
return pid if child died

WUNTRACED -- causes wait/waitpid to be returned from on child stop, in addition to termination.








When I do C-c Enter, my shell crashes
